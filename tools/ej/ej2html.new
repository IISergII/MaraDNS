#!/usr/bin/env lunacy

-- This script has been donated to the public domain in 2022 by Sam Trenholme
-- If, for some reason, a public domain declation is not acceptable, it
-- may be licensed under the following terms:

-- Copyright 2022 Sam Trenholme
-- Permission to use, copy, modify, and/or distribute this software for
-- any purpose with or without fee is hereby granted.
-- THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
-- WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
-- OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
-- ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
-- WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
-- ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
-- OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

-- Note that, unlike the old Perl ej2html, the character set *must* be utf-8
-- There is not an ej document out there using another charset, and here in
-- the 2020s there is no good reason to *not* use UTF-8 on a POSIX system

-- If they give a filename as an argument try to open that file
if arg[1] then 
 fh = io.open(arg[1],"rb")
 if not fh then
   print("Error opening file " .. arg[1])
   os.exit(1)
 end
 io.input(fh)
end

-- Mixed case regular expressions
-- mc() converts a string in to a case insensitive regex; mc('th') is [Tt][Hh]
function mc(i) 
  local out = ""
  for a=1,i:len() do
    seek = i:sub(a,a) 
    if seek:find("%a") then -- Only letters get mangled
      out = out .. "[" .. seek:upper() .. seek:lower() .. "]"
    else
      out = out .. seek
    end
  end
  return out
end
head=mc('head')
body=mc('body')
dtwidth=mc('dtwidth')
th=mc('th')
meta_http_equiv=mc('meta') .."%s+" .. mc('http%-equiv')
content=mc('content')
content_type=mc('content%-type')
text_html=mc('text/html')
charset_utf8=mc('charset=utf%-8')
bodyflags=mc('bodyflags')
include=mc('include')

l = io.read()
state = "INIT"
oldstate = "INIT"
bflags = ""
metaSeen = false
print("<HTML>") -- Upper case because that's how it was done in 2002
while l do
  -- Process .ej and make it HTML
  l = l:gsub("<!%-%-.*%-%->","") -- Remove single line comments
  if l:find("<!%-%-.*") then -- Multi-line comments
    oldstate = state
    state = "COMMENT"
  end
  if state ~= "COMMENT" then
    -- CODE HERE: include tag
    if l:find("<"..head..">") then state = "HEAD" end
    if l:find("</"..head..">") then state = "POSTHEAD" end
    if l:find("<"..body..">") then 
      if not metaSeen then
        print("FATAL: Please add this line to the header")
        print('<META HTTP-EQUIV="Content-Type" CONTENT="text/html; '..
              ' CHARSET=utf-8">')
        os.exit(1)
      end
      state = "BODY" 
      -- Add bodyflags to the BODY tag
      l=l:gsub("<("..body..")>","<%1"..bflags..">") 
    end
    if l:find("</"..body..">") then state = "POSTBODY" end
    if state == 'HEAD' then
      -- See if they have the mandatory
      -- <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=utf-8">
      -- line in the header
      if l:find("<"..meta_http_equiv..'="'..content_type..'"%s+'..content..
                '="'..text_html..';%s+'..charset_utf8..'">') then
        metaSeen = true
      end
      -- Remove headers used for man page
      l=l:gsub("<"..dtwidth..">.*</"..dtwidth..">","") 
      l=l:gsub("<"..th..">.*</"..th..">","") 
      -- BODYFLAGS was to allow the BODY tag to have flags like colors,
      -- which was commonly used with 2002-era HTML the script was
      -- written for.  We will still support it here in the 2020s
      if l:find("<"..bodyflags..">") then
        bflags=l:gsub(".*<"..bodyflags..">([^<]*)<"..bodyflags..">.*","%1")
        bflags=" "..bflags
        l=l:gsub("<"..bodyflags..">[^<]*<"..bodyflags..">","")
      end
    end
    print(l)
  else -- In HTML comment
    if l:find(".*%-%->") then -- End of comment
      l=l:gsub(".*%-%->","")
      print(l)
      state = oldstate
    end
  end
  l = io.read()
end
print("</HTML>")
