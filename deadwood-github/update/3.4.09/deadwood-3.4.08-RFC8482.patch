--- deadwood-3.4.08/src/DwSocket.h	2022-11-19 11:14:26.000000000 -0800
+++ deadwood-3.4.09/src/DwSocket.h	2022-11-25 19:11:18.355589802 -0800
@@ -1,4 +1,4 @@
-/* Copyright (c) 2007-2019 Sam Trenholme
+/* Copyright (c) 2007-2022 Sam Trenholme
  *
  * TERMS
  *
@@ -359,5 +359,8 @@
 /* Make the actual answer for a synthetic "not there" reply */
 unsigned char *make_synth_not_there_answer(unsigned char *a, int *count,
                 int type);
+/* Make a synthetic RFC8482 answer */
+unsigned char *make_synth_rfc8482_answer(unsigned char *a, int *count,
+                int type);
 
 #endif /* __DW_SOCKET_DEFINED__ */
--- deadwood-3.4.08/src/DwUdpSocket.c	2022-11-19 11:14:26.000000000 -0800
+++ deadwood-3.4.09/src/DwUdpSocket.c	2022-11-25 19:11:18.355589802 -0800
@@ -721,9 +721,19 @@
 
         /* Reject PTR or AAAA queries if not wanted */
         if((qtype == 28 /* AAAA */ && key_n[DWM_N_reject_aaaa] == 1) ||
-           (qtype == 12 /* PTR */ && key_n[DWM_N_reject_ptr] == 1)) {
+           (qtype == 12 /* PTR */ && key_n[DWM_N_reject_ptr] == 1) ||
+	   qtype == 255 || qtype == 13) {
                 unsigned char *answer;
-                answer = make_synth_not_there_answer(packet,&len,0);
+
+		if(qtype == 255 || qtype == 13) { /* ANY or HINFO */
+                	answer = make_synth_rfc8482_answer(packet,&len,0);
+		} else {
+                	answer = make_synth_not_there_answer(packet,&len,0);
+		}
+
+		if(answer == 0) {
+                	goto catch_get_local_udp_packet;
+		}
 
                 /* Flag this as an answer */
                 answer[2] |= 0x80;
@@ -929,30 +939,20 @@
         return ret;
 }
 
-/* Make the actual answer for a synthetic "not there" reply */
-unsigned char *make_synth_not_there_answer(unsigned char *a, int *count,
-                int type) {
-        /* This is the answer for a "not there" reply */
-        unsigned char not_there[41] =
-        "\xc0\x0c" /* Name */
-        "\0\x06" /* Type */
-        "\0\x01" /* Class */
-        "\0\0\0\0" /* TTL (don't cache) */
-        "\0\x1c" /* RDLENGTH */
-        "\x01\x7a\xc0\x0c" /* Origin */
-        "\x01\x79\xc0\x0c" /* Email */
-        "\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\x01" /* 5 numbers */;
+/* Make the actual answer for a synthetic reply */
+unsigned char *make_synth_answer(unsigned char *a, int *count,
+                int type, unsigned char *synth, int slen) {
         unsigned char *answer = 0;
         int counter = 0;
 
-        answer = dw_malloc(*count + 43);
+        answer = dw_malloc(*count + slen + 3);
         if(answer == 0) {
                 return 0;
         }
 
         if(type == 1) { /* Special case: Return just synth "not there" */
-                for(counter = 0; counter < 40; counter++) {
-                        answer[counter] = not_there[counter];
+                for(counter = 0; counter < slen; counter++) {
+                        answer[counter] = synth[counter];
                 }
                 return answer;
         }
@@ -983,14 +983,35 @@
         }
 
         /* Add the SOA reply to the answer */
-        for(counter = 0; counter < 40; counter++) {
-                answer[*count + counter] = not_there[counter];
+        for(counter = 0; counter < slen; counter++) {
+                answer[*count + counter] = synth[counter];
         }
 
         /* Return the answer */
         return answer;
 }
 
+unsigned char *make_synth_not_there_answer(unsigned char *a, int *count,
+                int type) {
+        /* This is the answer for a "not there" reply */
+        unsigned char not_there[41] =
+        "\xc0\x0c" /* Name */
+        "\0\x06" /* Type */
+        "\0\x01" /* Class */
+        "\0\0\0\0" /* TTL (don't cache) */
+        "\0\x1c" /* RDLENGTH */
+        "\x01\x7a\xc0\x0c" /* Origin */
+        "\x01\x79\xc0\x0c" /* Email */
+        "\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\x01" /* 5 numbers */;
+	return make_synth_answer(a, count, type, not_there, 40);
+}
+
+unsigned char *make_synth_rfc8482_answer(unsigned char *a, int *count, 
+		int type) {
+	unsigned char AnyAnswer[22] = 
+            "\xc0\x0c\x00\x0d\x00\x01\x00\x00\x00\x00\x00\x09\x07RFC8482\x00";
+	return make_synth_answer(a, count, type, AnyAnswer, 21);
+}
 /* Make a synthetic "not there" reply */
 void make_synth_not_there(int b, SOCKET sock, unsigned char *a, int count) {
         unsigned char *answer = 0;
